show_row_dend = F,
show_column_dend = F,top_annotation = ha)
gene.g1 <- c("SLITRK3", "PMAIP1", "IRX6", "LRRIQ4", "SH3GL3", "PNMA6A", "TOP1MT", "COX8C",
"CREB3L4", "ACSF3", "CEACAM19", "FKBP10", "ADAMTS16", "C10orf82", "AGXT",
"SLC25A31", "TOMM20L", "ALAS2", "HJURP", "RTKN2", "POLQ", "ENDOG", "DHFR",
"CKS2", "PIF1", "SHMT2", "SUV39H2", "UNG", "MPST", "SLC25A5", "PRDX4", "MRPL11",
"C9orf129", "MPV17L", "NAT8L", "GLDC", "CHDH", "CYP27B1", 'FSTL4', "NT5DC3",
'CD3EAP', 'TIMM8A', 'SFXN4', 'HK2', 'PDK1', "TFAP4", "TRAP1", "LDHB", "PAICS",
"APEX1", 'HPDL', "ALDH18A1", "RPUSD4", "SLC25A6", "MTHFD2", "HSPD1", 'UGT8',
'SLC35F2', 'FAM110B', "ACP6", 'PLD5', 'BDNF')
gene.g2 <- c("OTC", 'LGALS2', 'S1PR4', 'CCR7', 'IDO1', 'ADAM28', 'PARP15', 'DOCK8', 'CASP8',
'TMEM71', 'DGKA', 'SLC1A3', 'RNF144B', 'ZBED2')
## -----------------------------------
## annotate differential mitoP genes into mitoPathway
mitopathway.set <- read.table(file.path(dataDir,"reference/mitochondrial_proteins/mitoPathways.txt"), header=T,sep='\t',as.is=T)
mitopathway.set.df <- NULL
for(i in 1:nrow(mitopathway.set)){
cat(i, '\n')
tmp <- stringr::str_split(mitopathway.set$Genes[i], ',')[[1]]
tmp <- stringr::str_replace_all(tmp, "^ ", '')
tmp.df <- data.frame(mitoPathway=rep(mitopathway.set$MitoPathway[i], length(tmp)),
mitoGene=tmp, stringsAsFactors = F)
mitopathway.set.df <- rbind(mitopathway.set.df, tmp.df)
}
head(mitopathway.set.df)
dim(mitopathway.set.df)
gene.g1 <- c("SLITRK3", "PMAIP1", "IRX6", "LRRIQ4", "SH3GL3", "PNMA6A", "TOP1MT", "COX8C",
"CREB3L4", "ACSF3", "CEACAM19", "FKBP10", "ADAMTS16", "C10orf82", "AGXT",
"SLC25A31", "TOMM20L", "ALAS2", "HJURP", "RTKN2", "POLQ", "ENDOG", "DHFR",
"CKS2", "PIF1", "SHMT2", "SUV39H2", "UNG", "MPST", "SLC25A5", "PRDX4", "MRPL11",
"C9orf129", "MPV17L", "NAT8L", "GLDC", "CHDH", "CYP27B1", 'FSTL4', "NT5DC3",
'CD3EAP', 'TIMM8A', 'SFXN4', 'HK2', 'PDK1', "TFAP4", "TRAP1", "LDHB", "PAICS",
"APEX1", 'HPDL', "ALDH18A1", "RPUSD4", "SLC25A6", "MTHFD2", "HSPD1", 'UGT8',
'SLC35F2', 'FAM110B', "ACP6", 'PLD5', 'BDNF')
sort(gene.g1)
library(piano)
?loadGSC
projDir
myc.targets <- piano::loadGSC(file.path(dataDir, "for_revise/DANG_MYC_TARGETS_UP.v2022.1.Hs.gmt"))
myc.targets
length(myc.targets)
names(myc.targets)
myc.targets$gsc
myc.targets <- myc.targets$gsc[[1]]
myc.targets
table(gene.g1 %in% myc.targets)
gene.g1[gene.g1 %in% myc.targets]
library(TCGAbiolinks)
projects <- TCGAbiolinks:::getGDCprojects()$project_id
length(projects)
head(projects)
projects
projects <- projects[grepl('^TCGA',projects,perl=T)]
?GDCquery
projects
query <- GDCquery(project = projects,
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTSeq - Counts")
query <- GDCquery(project = projects,
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTSeq - Counts")
query
query <- GDCquery(project = projects[1],
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTSeq - Counts")
query <- GDCquery(project = "TCGA-ACC",
data.category =  "Copy number variation",
legacy = TRUE,
file.type = "hg19.seg",
barcode = c("TCGA-OR-A5LR-01A-11D-A29H-01"))
library(UCSCXenaTools)
library(dplyr)
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Adrenocortical Cancer")
curr.cohort
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Adrenocortical Cancer") %>%
XenaScan("pancan")
curr.cohort
as.data.frame(curr.cohort)
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/luanyizhao/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Bile Duct Cancer") %>%
XenaScan("pancan")
curr.cohort
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Bladder Cancer") %>%
XenaScan("pancan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Breast Cancer") %>%
XenaScan("pancan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Cervival Cancer") %>%
XenaScan("pancan")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Cervical Cancer") %>%
XenaScan("pancan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Esophageal Cancer") %>%
XenaScan("pancan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Glioblastoma") %>%
XenaScan("pancan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Kidney Clear Cell Carcinoma") %>%
XenaScan("pancan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Pan-Cancer") %>%
XenaScan("pancan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Pan-Cancer") #%>%
as.data.frame(curr.cohort)
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Pan Cancer") %>%
XenaScan("fpkm")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA PANCAN") %>%
XenaScan("fpkm")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("PANCAN") %>%
XenaScan("fpkm")
dim(curr.cohort)
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Kidney Papillary Cell Carcinoma") %>%
XenaScan("pan")
curr.cohort
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Liver Cancer") %>%
XenaScan("pan")
curr.cohort
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Kidney Clear Cell Carcinoma") %>%
XenaScan("pan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Stomach Cancer") %>%
XenaScan("pan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Pancreatic Cancer") %>%
XenaScan("pan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Ocular Melanomas") %>%
XenaScan("pan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Melanoma") %>%
XenaScan("pan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Melanoma") %>%
XenaScan("pan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.cohort <- XenaData %>%
filter(XenaHostNames == "tcgaHub") %>%
filter(DataSubtype == "gene expression RNAseq") %>%
XenaScan("TCGA Kidney Clear Cell Carcinoma") %>%
XenaScan("pan")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
curr.query <- curr.cohort %>% XenaGenerate() %>%
XenaQuery() %>% XenaDownload(destdir = "/users/yizhaoluan/projects/datasets/Xena")
~/XenaDownload.R
library(BSgenome.Hsapiens.UCSC.hg38)
library(meta)
library(metafor)
## read data
proj.dir <- "/Users/yizhaoluan/projects/wanghuanli"
niaoye=read.csv(file.path(proj.dir, 'niaoye.csv') )
shizi=read.csv(file.path(proj.dir, 'shizi.csv'))
niaoye
shizi
## meta analysis（由于阳性率在0-20%之间波动,sm选择为对数转换“PLOGIT”），具体参考：https://www.360qikan.com/baike/202004/36977.html
metarate<-metaprop(event,n, study, data=shizi,sm="PLOGIT",incr=0.5,allincr=FALSE,addincr=FALSE,
comb.fixed=TRUE,comb.random=TRUE,title="",complab="",print.byvar=TRUE, warn=TRUE)
## 展示结果
summary(metarate)
## Forest plot
forest(metarate)
## meta analysis（由于阳性率在0-20%之间波动,sm选择为对数转换“PLOGIT”），具体参考：https://www.360qikan.com/baike/202004/36977.html
metarate<-metaprop(event,n, study, data=niaoye,sm="PLOGIT",incr=0.5,allincr=FALSE,addincr=FALSE,
comb.fixed=TRUE,comb.random=TRUE,title="",complab="",print.byvar=TRUE, warn=TRUE)
## Forest plot
forest(metarate)
## 展示结果
summary(metarate)871
## 展示结果
summary(metarate)
niaoye=read.csv(file.path(proj.dir, 'niaoye_t1.csv') )
shizi=read.csv(file.path(proj.dir, 'shizi_t1.csv'))
## meta analysis（由于阳性率在0-20%之间波动,sm选择为对数转换“PLOGIT”），具体参考：https://www.360qikan.com/baike/202004/36977.html
metarate<-metaprop(event,n, study, data=niaoye,sm="PLOGIT",incr=0.5,allincr=FALSE,addincr=FALSE,
comb.fixed=TRUE,comb.random=TRUE,title="",complab="",print.byvar=TRUE, warn=TRUE)
## Forest plot
forest(metarate)
## 展示结果
summary(metarate)
## meta analysis（由于阳性率在0-20%之间波动,sm选择为对数转换“PLOGIT”），具体参考：https://www.360qikan.com/baike/202004/36977.html
metarate<-metaprop(event,n, study, data=shizi,sm="PLOGIT",incr=0.5,allincr=FALSE,addincr=FALSE,
comb.fixed=TRUE,comb.random=TRUE,title="",complab="",print.byvar=TRUE, warn=TRUE)
## Forest plot
forest(metarate)
## 展示结果
summary(metarate)
niaoye=read.csv(file.path(proj.dir, 'niaoye_t2.csv') )
shizi=read.csv(file.path(proj.dir, 'shizi_t2.csv'))
## meta analysis（由于阳性率在0-20%之间波动,sm选择为对数转换“PLOGIT”），具体参考：https://www.360qikan.com/baike/202004/36977.html
metarate<-metaprop(event,n, study, data=shizi,sm="PLOGIT",incr=0.5,allincr=FALSE,addincr=FALSE,
comb.fixed=TRUE,comb.random=TRUE,title="",complab="",print.byvar=TRUE, warn=TRUE)
## Forest plot
forest(metarate)
## 展示结果
summary(metarate)
## meta analysis（由于阳性率在0-20%之间波动,sm选择为对数转换“PLOGIT”），具体参考：https://www.360qikan.com/baike/202004/36977.html
metarate<-metaprop(event,n, study, data=niaoye,sm="PLOGIT",incr=0.5,allincr=FALSE,addincr=FALSE,
comb.fixed=TRUE,comb.random=TRUE,title="",complab="",print.byvar=TRUE, warn=TRUE)
## Forest plot
forest(metarate)
## 展示结果
summary(metarate)
shizi=read.csv(file.path(proj.dir, 'shizi_t3.csv'))
niaoye=read.csv(file.path(proj.dir, 'niaoye_t3.csv') )
shizi=read.csv(file.path(proj.dir, 'shizi_t3.csv'))
## meta analysis（由于阳性率在0-20%之间波动,sm选择为对数转换“PLOGIT”），具体参考：https://www.360qikan.com/baike/202004/36977.html
metarate<-metaprop(event,n, study, data=niaoye,sm="PLOGIT",incr=0.5,allincr=FALSE,addincr=FALSE,
comb.fixed=TRUE,comb.random=TRUE,title="",complab="",print.byvar=TRUE, warn=TRUE)
## 展示结果
summary(metarate)
## meta analysis（由于阳性率在0-20%之间波动,sm选择为对数转换“PLOGIT”），具体参考：https://www.360qikan.com/baike/202004/36977.html
metarate<-metaprop(event,n, study, data=shizi,sm="PLOGIT",incr=0.5,allincr=FALSE,addincr=FALSE,
comb.fixed=TRUE,comb.random=TRUE,title="",complab="",print.byvar=TRUE, warn=TRUE)
## Forest plot
forest(metarate)
## 展示结果
summary(metarate)
## global dirs and objects
data.dir <- "/Users/yizhaoluan/Library/CloudStorage/OneDrive-个人/1My_Documents/projects/rna_cis/results"
combined.tomtom.between.samples.file <- file.path(data.dir, "combined_tomtom_between_samples_fiveUTR_4mer.txt")
combined.tomtom.to.known.file <- file.path(data.dir, "combined_tomtom_to_known_fiveUTR_4mer.txt")
combined.motifs.fiveutr.file <- file.path(data.dir, "combined_fiveUTR_motifs_four_samples.rds")
combined.peak2motifs.fiveutr.file <- file.path(data.dir, "combined_fiveUTR_peak2motifs_four_samples.rds")
combined.tomtom.between.samples <- read.table(combined.tomtom.between.samples.file, header=T, sep='\t', as.is=T)
dim(combined.tomtom.between.samples)
head(combined.tomtom.between.samples)
combined.tomtom.to.known <- read.table(combined.tomtom.to.known.file, header=T, sep='\t', as.is= T)
combined.motifs.fiveutr <- readRDS(file=combined.motifs.fiveutr.file)
head(combined.motifs.fiveutr)
combined.peak2motifs.fiveutr <- readRDS(file=combined.peak2motifs.fiveutr.file)
head(combined.tomtom.between.samples)
## requirements
require(dplyr)
head(combined.tomtom.between.samples)
summary(combined.tomtom.between.samples$pval)
summary(combined.tomtom.between.samples$qval)
table(combined.tomtom.between.samples$qval < 0.1)
table(combined.tomtom.between.samples$qval < 0.05)
sub.set <- combined.tomtom.between.samples %>% subset(qval < 0.1)
dim(sub.set)
head(sub.set)
sub.set <- combined.tomtom.between.samples %>% subset(qval < 0.1) %>%
group_by(query_sample, target_sample) %>%
summarize(n = n_distinct(query_motif))
dim(sub.set)
sub.set
sum(sub.set$n)
test.stat <- combined.tomtom.between.samples %>%
group_by(query_sample, target_sample) %>%
summarize(n = n_distinct(query_motif))
dim(test.stat)
test.stat
summary(combined.tomtom.to.known$pval)
## requirements
require(dplyr)
## global dirs and objects
data.dir <- "/Users/yizhaoluan/Library/CloudStorage/OneDrive-个人/1My_Documents/projects/rna_cis/results"
combined.tomtom.between.samples.file <- file.path(data.dir, "combined_tomtom_between_samples_fiveUTR_4mer.txt")
combined.tomtom.to.known.file <- file.path(data.dir, "combined_tomtom_to_known_fiveUTR_4mer.txt")
combined.motifs.fiveutr.file <- file.path(data.dir, "combined_fiveUTR_motifs_four_samples.rds")
combined.peak2motifs.fiveutr.file <- file.path(data.dir, "combined_fiveUTR_peak2motifs_four_samples.rds")
combined.tomtom.between.samples <- read.table(combined.tomtom.between.samples.file, header=T, sep='\t', as.is=T)
combined.tomtom.to.known <- read.table(combined.tomtom.to.known.file, header=T, sep='\t', as.is= T)
combined.motifs.fiveutr <- readRDS(file=combined.motifs.fiveutr.file)
combined.peak2motifs.fiveutr <- readRDS(file=combined.peak2motifs.fiveutr.file)
summary(combined.tomtom.to.known$pval)
summary(combined.tomtom.to.known$qval)
table(combined.tomtom.to.known$qval < 0.1)
table(combined.tomtom.to.known$qval < 0.05)
head(combined.tomtom.to.known)
sub.set <- combined.tomtom.to.known %>% subset(qval < 0.1) %>%
group_by(query_sample, target_db) %>%
summarize(n = n_distinct(query_motif))
sub.set
?choose
## global dirs and objects
data.dir <- "/Users/yizhaoluan/Library/CloudStorage/OneDrive-个人/1My_Documents/projects/rna_cis/results"
combined.tomtom.between.samples.file <- file.path(data.dir, "combined_tomtom_between_samples_fiveUTR_4mer.txt")
combined.tomtom.to.known.file <- file.path(data.dir, "combined_tomtom_to_known_fiveUTR_4mer.txt")
combined.motifs.fiveutr.file <- file.path(data.dir, "combined_fiveUTR_motifs_four_samples.rds")
combined.peak2motifs.fiveutr.file <- file.path(data.dir, "combined_fiveUTR_peak2motifs_four_samples.rds")
combined.tomtom.between.samples <- read.table(combined.tomtom.between.samples.file, header=T, sep='\t', as.is=T)
combined.tomtom.to.known <- read.table(combined.tomtom.to.known.file, header=T, sep='\t', as.is= T)
combined.motifs.fiveutr <- readRDS(file=combined.motifs.fiveutr.file)
combined.peak2motifs.fiveutr <- readRDS(file=combined.peak2motifs.fiveutr.file)
summary(combined.tomtom.to.known$pval)
summary(combined.tomtom.to.known$qval)
table(combined.tomtom.to.known$qval < 0.1)
table(combined.tomtom.to.known$qval < 0.05)
sub.set <- combined.tomtom.to.known %>% subset(qval < 0.1) %>%
group_by(query_sample, target_db) %>%
summarize(n = n_distinct(query_motif))
sub.set
colnames(sub.set) <- c('query_sample', 'target_db', 'n_motif_matches')
sub.set
summary(combined.tomtom.between.samples$pval)
summary(combined.tomtom.between.samples$qval)
table(combined.tomtom.between.samples$qval < 0.1)
table(combined.tomtom.between.samples$qval < 0.05)
sub.set <- combined.tomtom.between.samples %>% subset(qval < 0.1) %>%
group_by(query_sample, target_sample) %>%
summarize(n = n_distinct(query_motif))
sub.set
source("~/GitHub/rna-cis/code/3_motif_analysis_summary_mac_presentation.R", encoding = 'GB18030')
library(ggplot2)
library(GenomicRanges)
regulatory_elements <- GRanges(
seqnames = c("chr1", "chr1", "chr2"),
ranges = IRanges(start = c(100, 500, 200), end = c(200, 600, 300))
)
target_genes <- GRanges(
seqnames = c("chr1", "chr2", "chr2"),
ranges = IRanges(start = c(150, 250, 400), end = c(200, 300, 500))
)
# 绘制调控关系图
ggplot() +
geom_segment(aes(x = start(regulatory_elements), xend = start(target_genes),
y = seqnames(regulatory_elements), yend = seqnames(target_genes)),
color = "blue", size = 2) +
theme_bw() +
labs(x = "Position", y = "Chromosome") +
ggtitle("Regulatory Relationships") +
theme(plot.title = element_text(hjust = 0.5))
rlang::last_trace()
install.packages("shidashi")
library(ggExtra)
library(rmarkdown)
install.packages("ggExtra")
library(tools)
library(shidashi)
project <- file.path(tools::R_user_dir('shidashi', which = "data"), "AdminLTE3")
# `use_template` only needs to be called once
use_template(project)
render(project)
shiny::runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
library(SCpubr)
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk/script/demo-form.R')
runApp('GitHub/silk/script/demo-form.R')
runApp('GitHub/silk/script/demo-form.R')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk/script/demo-form.R')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk')
runApp('GitHub/silk/script/demo-fileInput.R')
runApp('GitHub/silk/script/demo-fileInput.R')
BiocManager::install("SingleCellSignalR")
library(SingleCellSignalR)
shiny::runApp('GitHub/silk')
library(future)
library(edgeR)
LRdb
markers_default
dim(LRdb)
class(LRdb)
head(LRdb)
library(tcltk)
runApp('GitHub/silk')
？shinyDirButton
?shynyDirButton
library(shiny)
library(shinyFiles)
?shynyDirButton
?shynyDirButton
?shinyDirButton
runApp('GitHub/silk')
runApp('GitHub/silk')
